// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pong.proto

/*
Package pong is a generated protocol buffer package.

It is generated from these files:
	pong.proto

It has these top-level messages:
	SetPlayerPositionRequest
	SetPlayerPositionReply
	GetBallPositionRequest
	GetBallPositionReply
	IdentifyPlayerRequest
	IdentifyPlayerReply
	GetOpponentRequest
	GetOpponentReply
*/
package pong

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetPlayerPositionRequest struct {
	Handshake    string `protobuf:"bytes,1,opt,name=Handshake" json:"Handshake,omitempty"`
	PlayerNumber int32  `protobuf:"varint,2,opt,name=PlayerNumber" json:"PlayerNumber,omitempty"`
	X            int32  `protobuf:"varint,3,opt,name=X" json:"X,omitempty"`
	Y            int32  `protobuf:"varint,4,opt,name=Y" json:"Y,omitempty"`
}

func (m *SetPlayerPositionRequest) Reset()                    { *m = SetPlayerPositionRequest{} }
func (m *SetPlayerPositionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPositionRequest) ProtoMessage()               {}
func (*SetPlayerPositionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SetPlayerPositionRequest) GetHandshake() string {
	if m != nil {
		return m.Handshake
	}
	return ""
}

func (m *SetPlayerPositionRequest) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

func (m *SetPlayerPositionRequest) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *SetPlayerPositionRequest) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type SetPlayerPositionReply struct {
	PlayerNumber int32 `protobuf:"varint,1,opt,name=PlayerNumber" json:"PlayerNumber,omitempty"`
	X            int32 `protobuf:"varint,2,opt,name=X" json:"X,omitempty"`
	Y            int32 `protobuf:"varint,3,opt,name=Y" json:"Y,omitempty"`
}

func (m *SetPlayerPositionReply) Reset()                    { *m = SetPlayerPositionReply{} }
func (m *SetPlayerPositionReply) String() string            { return proto.CompactTextString(m) }
func (*SetPlayerPositionReply) ProtoMessage()               {}
func (*SetPlayerPositionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SetPlayerPositionReply) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

func (m *SetPlayerPositionReply) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *SetPlayerPositionReply) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type GetBallPositionRequest struct {
	Handshake string `protobuf:"bytes,1,opt,name=Handshake" json:"Handshake,omitempty"`
}

func (m *GetBallPositionRequest) Reset()                    { *m = GetBallPositionRequest{} }
func (m *GetBallPositionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBallPositionRequest) ProtoMessage()               {}
func (*GetBallPositionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetBallPositionRequest) GetHandshake() string {
	if m != nil {
		return m.Handshake
	}
	return ""
}

type GetBallPositionReply struct {
	X int32 `protobuf:"varint,1,opt,name=X" json:"X,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=Y" json:"Y,omitempty"`
}

func (m *GetBallPositionReply) Reset()                    { *m = GetBallPositionReply{} }
func (m *GetBallPositionReply) String() string            { return proto.CompactTextString(m) }
func (*GetBallPositionReply) ProtoMessage()               {}
func (*GetBallPositionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetBallPositionReply) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GetBallPositionReply) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type IdentifyPlayerRequest struct {
}

func (m *IdentifyPlayerRequest) Reset()                    { *m = IdentifyPlayerRequest{} }
func (m *IdentifyPlayerRequest) String() string            { return proto.CompactTextString(m) }
func (*IdentifyPlayerRequest) ProtoMessage()               {}
func (*IdentifyPlayerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type IdentifyPlayerReply struct {
	PlayerNumber int32  `protobuf:"varint,1,opt,name=PlayerNumber" json:"PlayerNumber,omitempty"`
	Handshake    string `protobuf:"bytes,2,opt,name=Handshake" json:"Handshake,omitempty"`
}

func (m *IdentifyPlayerReply) Reset()                    { *m = IdentifyPlayerReply{} }
func (m *IdentifyPlayerReply) String() string            { return proto.CompactTextString(m) }
func (*IdentifyPlayerReply) ProtoMessage()               {}
func (*IdentifyPlayerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IdentifyPlayerReply) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

func (m *IdentifyPlayerReply) GetHandshake() string {
	if m != nil {
		return m.Handshake
	}
	return ""
}

type GetOpponentRequest struct {
	PlayerNumber int32  `protobuf:"varint,1,opt,name=PlayerNumber" json:"PlayerNumber,omitempty"`
	Handshake    string `protobuf:"bytes,2,opt,name=Handshake" json:"Handshake,omitempty"`
}

func (m *GetOpponentRequest) Reset()                    { *m = GetOpponentRequest{} }
func (m *GetOpponentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOpponentRequest) ProtoMessage()               {}
func (*GetOpponentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetOpponentRequest) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

func (m *GetOpponentRequest) GetHandshake() string {
	if m != nil {
		return m.Handshake
	}
	return ""
}

type GetOpponentReply struct {
	PlayerNumber int32 `protobuf:"varint,1,opt,name=PlayerNumber" json:"PlayerNumber,omitempty"`
	X            int32 `protobuf:"varint,2,opt,name=X" json:"X,omitempty"`
	Y            int32 `protobuf:"varint,3,opt,name=Y" json:"Y,omitempty"`
}

func (m *GetOpponentReply) Reset()                    { *m = GetOpponentReply{} }
func (m *GetOpponentReply) String() string            { return proto.CompactTextString(m) }
func (*GetOpponentReply) ProtoMessage()               {}
func (*GetOpponentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetOpponentReply) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

func (m *GetOpponentReply) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GetOpponentReply) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*SetPlayerPositionRequest)(nil), "pong.SetPlayerPositionRequest")
	proto.RegisterType((*SetPlayerPositionReply)(nil), "pong.SetPlayerPositionReply")
	proto.RegisterType((*GetBallPositionRequest)(nil), "pong.GetBallPositionRequest")
	proto.RegisterType((*GetBallPositionReply)(nil), "pong.GetBallPositionReply")
	proto.RegisterType((*IdentifyPlayerRequest)(nil), "pong.IdentifyPlayerRequest")
	proto.RegisterType((*IdentifyPlayerReply)(nil), "pong.IdentifyPlayerReply")
	proto.RegisterType((*GetOpponentRequest)(nil), "pong.GetOpponentRequest")
	proto.RegisterType((*GetOpponentReply)(nil), "pong.GetOpponentReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ponger service

type PongerClient interface {
	// Sends a player position
	SetPlayerPosition(ctx context.Context, in *SetPlayerPositionRequest, opts ...grpc.CallOption) (*SetPlayerPositionReply, error)
	// Gets the ball position
	GetBallPosition(ctx context.Context, in *GetBallPositionRequest, opts ...grpc.CallOption) (*GetBallPositionReply, error)
	// Get opponent position
	GetOpponent(ctx context.Context, in *GetOpponentRequest, opts ...grpc.CallOption) (*GetOpponentReply, error)
	// Get Player number and the handshake which will be required in the other calls
	IdentifyPlayer(ctx context.Context, in *IdentifyPlayerRequest, opts ...grpc.CallOption) (*IdentifyPlayerReply, error)
}

type pongerClient struct {
	cc *grpc.ClientConn
}

func NewPongerClient(cc *grpc.ClientConn) PongerClient {
	return &pongerClient{cc}
}

func (c *pongerClient) SetPlayerPosition(ctx context.Context, in *SetPlayerPositionRequest, opts ...grpc.CallOption) (*SetPlayerPositionReply, error) {
	out := new(SetPlayerPositionReply)
	err := grpc.Invoke(ctx, "/pong.Ponger/SetPlayerPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pongerClient) GetBallPosition(ctx context.Context, in *GetBallPositionRequest, opts ...grpc.CallOption) (*GetBallPositionReply, error) {
	out := new(GetBallPositionReply)
	err := grpc.Invoke(ctx, "/pong.Ponger/GetBallPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pongerClient) GetOpponent(ctx context.Context, in *GetOpponentRequest, opts ...grpc.CallOption) (*GetOpponentReply, error) {
	out := new(GetOpponentReply)
	err := grpc.Invoke(ctx, "/pong.Ponger/GetOpponent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pongerClient) IdentifyPlayer(ctx context.Context, in *IdentifyPlayerRequest, opts ...grpc.CallOption) (*IdentifyPlayerReply, error) {
	out := new(IdentifyPlayerReply)
	err := grpc.Invoke(ctx, "/pong.Ponger/IdentifyPlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ponger service

type PongerServer interface {
	// Sends a player position
	SetPlayerPosition(context.Context, *SetPlayerPositionRequest) (*SetPlayerPositionReply, error)
	// Gets the ball position
	GetBallPosition(context.Context, *GetBallPositionRequest) (*GetBallPositionReply, error)
	// Get opponent position
	GetOpponent(context.Context, *GetOpponentRequest) (*GetOpponentReply, error)
	// Get Player number and the handshake which will be required in the other calls
	IdentifyPlayer(context.Context, *IdentifyPlayerRequest) (*IdentifyPlayerReply, error)
}

func RegisterPongerServer(s *grpc.Server, srv PongerServer) {
	s.RegisterService(&_Ponger_serviceDesc, srv)
}

func _Ponger_SetPlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongerServer).SetPlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Ponger/SetPlayerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongerServer).SetPlayerPosition(ctx, req.(*SetPlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ponger_GetBallPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBallPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongerServer).GetBallPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Ponger/GetBallPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongerServer).GetBallPosition(ctx, req.(*GetBallPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ponger_GetOpponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongerServer).GetOpponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Ponger/GetOpponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongerServer).GetOpponent(ctx, req.(*GetOpponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ponger_IdentifyPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifyPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongerServer).IdentifyPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Ponger/IdentifyPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongerServer).IdentifyPlayer(ctx, req.(*IdentifyPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ponger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pong.Ponger",
	HandlerType: (*PongerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPlayerPosition",
			Handler:    _Ponger_SetPlayerPosition_Handler,
		},
		{
			MethodName: "GetBallPosition",
			Handler:    _Ponger_GetBallPosition_Handler,
		},
		{
			MethodName: "GetOpponent",
			Handler:    _Ponger_GetOpponent_Handler,
		},
		{
			MethodName: "IdentifyPlayer",
			Handler:    _Ponger_IdentifyPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pong.proto",
}

func init() { proto.RegisterFile("pong.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x51, 0x4f, 0xf2, 0x30,
	0x14, 0xfd, 0x3a, 0xf8, 0x48, 0xb8, 0x12, 0xd1, 0xaa, 0x38, 0x07, 0x31, 0x66, 0x4f, 0x3e, 0x2d,
	0x06, 0x13, 0xdf, 0xe5, 0x45, 0x34, 0x51, 0x97, 0x91, 0x08, 0x3c, 0x0e, 0xa9, 0xb0, 0x58, 0xd6,
	0xb9, 0x95, 0x08, 0xbf, 0xcd, 0x3f, 0x67, 0xbb, 0x82, 0xda, 0xb1, 0x25, 0x1a, 0x7d, 0xbb, 0xed,
	0xb9, 0xf7, 0xdc, 0x73, 0x7b, 0x4f, 0x01, 0x22, 0x16, 0x4e, 0x9c, 0x28, 0x66, 0x9c, 0xe1, 0xb2,
	0x8c, 0xed, 0x05, 0x98, 0x3d, 0xc2, 0x5d, 0xea, 0x2f, 0x49, 0xec, 0xb2, 0x24, 0xe0, 0x01, 0x0b,
	0x3d, 0xf2, 0x32, 0x27, 0x09, 0xc7, 0x2d, 0xa8, 0x76, 0xfd, 0x70, 0x9c, 0x4c, 0xfd, 0x67, 0x62,
	0xa2, 0x13, 0x74, 0x5a, 0xf5, 0x3e, 0x2f, 0xb0, 0x0d, 0x35, 0x55, 0x76, 0x37, 0x9f, 0x8d, 0x48,
	0x6c, 0x1a, 0x22, 0xe1, 0xbf, 0xa7, 0xdd, 0xe1, 0x1a, 0xa0, 0x81, 0x59, 0x4a, 0x01, 0x34, 0x90,
	0xa7, 0xa1, 0x59, 0x56, 0xa7, 0xa1, 0x3d, 0x80, 0x46, 0x4e, 0xe7, 0x88, 0x2e, 0x37, 0x98, 0x51,
	0x11, 0xb3, 0xa1, 0x31, 0x97, 0xd6, 0xcc, 0x17, 0xd0, 0xb8, 0x22, 0xbc, 0xe3, 0x53, 0xfa, 0xa3,
	0x89, 0xec, 0x36, 0xec, 0x6f, 0xd4, 0x49, 0x3d, 0x69, 0x2f, 0xa4, 0xf5, 0x32, 0xd6, 0xbd, 0x0e,
	0xe1, 0xe0, 0x7a, 0x4c, 0x42, 0x1e, 0x3c, 0x2d, 0x95, 0xbe, 0x55, 0x2b, 0xbb, 0x0f, 0x7b, 0x59,
	0xe0, 0xbb, 0xb3, 0x69, 0x2a, 0x8d, 0xac, 0xca, 0x07, 0xc0, 0x42, 0xe5, 0x7d, 0x24, 0xd6, 0x27,
	0xe8, 0xd7, 0x93, 0xfd, 0x9e, 0xd7, 0x83, 0x1d, 0x8d, 0xf7, 0x0f, 0x36, 0xd1, 0x7e, 0x33, 0xa0,
	0xe2, 0x0a, 0x9b, 0x89, 0xb4, 0x1e, 0xec, 0x6e, 0xac, 0x1b, 0x1f, 0x3b, 0xa9, 0x21, 0x8b, 0x1c,
	0x68, 0xb5, 0x0a, 0x71, 0xa1, 0xce, 0xfe, 0x87, 0x6f, 0xa1, 0x9e, 0xd9, 0x18, 0x5e, 0x95, 0xe4,
	0x1b, 0xc0, 0xb2, 0x0a, 0x50, 0x45, 0x77, 0x09, 0x5b, 0x5f, 0x9e, 0x00, 0x9b, 0x1f, 0xc9, 0x99,
	0xd7, 0xb6, 0x1a, 0x39, 0x88, 0xa2, 0xb8, 0x81, 0x6d, 0x7d, 0xed, 0xb8, 0xa9, 0x72, 0x73, 0x5d,
	0x62, 0x1d, 0xe5, 0x83, 0x29, 0x57, 0xe7, 0x0c, 0x9a, 0x01, 0x73, 0x26, 0x71, 0xf4, 0xe8, 0x90,
	0x85, 0x3f, 0x8b, 0x28, 0x49, 0x9c, 0x29, 0xa1, 0x94, 0xbd, 0xb2, 0x98, 0x8e, 0x3b, 0xf5, 0xae,
	0x8c, 0xfb, 0x32, 0x76, 0xe5, 0x8f, 0x76, 0xd1, 0xa8, 0x92, 0x7e, 0xed, 0xf3, 0xf7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9c, 0xff, 0xcb, 0x32, 0xe8, 0x03, 0x00, 0x00,
}
